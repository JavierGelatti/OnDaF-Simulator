TestCase subclass: #ExamDesignerTest	instanceVariableNames: 'theExamDesigner'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core-Tests'!!ExamDesignerTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:46'!test01	| anExam |	theExamDesigner considerText: 'Title', String lf, 'Content'.	anExam := theExamDesigner designExam.	self assert: anExam numberOfTexts equals: 1.! !!ExamDesignerTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 21:36'!test02	| anExam |	theExamDesigner considerText: 'Title A', String lf, 'Content 1'.	theExamDesigner considerText: 'Title B', String lf, 'Content 2'.	anExam := theExamDesigner designExam.	self assert: anExam numberOfTexts equals: 2.! !!ExamDesignerTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:49'!test03	| titles |	titles := OrderedCollection new.		theExamDesigner informProgressTo: [ :title | titles add: title ].	theExamDesigner considerText: 'Title A', String lf, 'Content 1'.	theExamDesigner considerText: 'Title B', String lf, 'Content 2'.		self assert: titles asArray equals: #('Title A' 'Title B').! !!ExamDesignerTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 03:20'!setUp	theExamDesigner := ExamDesigner new.! !TestCase subclass: #ExamTest	instanceVariableNames: 'theExamDesigner theExam'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core-Tests'!!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 20:59'!test03EvaluateAMixedSubmission1	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}.'.		aSubmission := #('llo').	aResult := theExam evaluate: aSubmission.		self assert: aResult individualResults equals: #(true false).! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 21:03'!test06RoundPercentageToTwoDecimals	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}. Cor{rect}'.		aSubmission := #('wrong' 'ld' 'rect').	aResult := theExam evaluate: aSubmission.		self assert: aResult percentage equals: 66.67.! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 20:59'!test06CalculatePercentage	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}.'.		aSubmission := #('wrong' 'ld').	aResult := theExam evaluate: aSubmission.		self assert: aResult percentage equals: 50.! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 20:59'!test02EvaluateAnIncorrectSubmission	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}.'.		aSubmission := #('wrong' 'answer').	aResult := theExam evaluate: aSubmission.		self assert: aResult individualResults equals: #(false false).! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 20:59'!test04EvaluateAMixedSubmission2	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}.'.		aSubmission := #('wrong' 'ld').	aResult := theExam evaluate: aSubmission.		self assert: aResult individualResults equals: #(false true).! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 20:59'!test05EvaluateTheSubmissionOfMultipleTexts	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'he{llo} wor{ld}'	                   and: 'Title B', String lf, 'loca{tion}'.		aSubmission := #('llo' 'ld' 'tion').	aResult := theExam evaluate: aSubmission.		self assert: aResult individualResults equals: #(true true true).! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 22:03'!test08DetermineLevelForSubmission	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}. Cor{rect}'.		aSubmission := #('wrong' 'ld' 'rect').	aResult := theExam evaluate: aSubmission.		self assert: aResult level equals: 'B1'.! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 22:28'!test10DetermineMaximumScore	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}. Cor{rect}'.		aSubmission := #('wrong' 'ld' 'rect').	aResult := theExam evaluate: aSubmission.		self assert: aResult maxScore equals: 3.! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 21:33'!test07CopyOnPrinter	| aPrinter |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}.'.	aPrinter := TestPrinter new.		theExam copyOn: aPrinter.		self assert: aPrinter printedText equals: '|Title A| And the text said: he_ wor_ . '.! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 22:27'!test09DetermineScore	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}. Cor{rect}'.		aSubmission := #('wrong' 'ld' 'rect').	aResult := theExam evaluate: aSubmission.		self assert: aResult score equals: 2.! !!ExamTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 11/6/2016 20:59'!test01EvaluateACorrectSubmission	| aSubmission aResult |	self givenExamWithText: 'Title A', String lf, 'And the text said: he{llo} wor{ld}.'.		aSubmission := #('llo' 'ld').	aResult := theExam evaluate: aSubmission.		self assert: aResult individualResults equals: #(true true).! !!ExamTest methodsFor: 'given' stamp: 'FacundoJavierGelatti 10/18/2016 03:58'!givenExamWithText: text1	| examDesigner |	examDesigner := ExamDesigner new.	examDesigner considerText: text1.	theExam := examDesigner designExam.! !!ExamTest methodsFor: 'given' stamp: 'FacundoJavierGelatti 10/18/2016 03:57'!givenExamWithText: text1 and: text2 	| examDesigner |	examDesigner := ExamDesigner new.	examDesigner considerText: text1.	examDesigner considerText: text2.	theExam := examDesigner designExam.! !!ExamTest methodsFor: 'running' stamp: 'FacundoJavierGelatti 10/18/2016 03:54'!setUp	theExamDesigner := ExamDesigner new.! !TestCase subclass: #InterpreterText	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core-Tests'!!InterpreterText methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 21:41'!test9	| anInterpreter aText stringText |	anInterpreter := CTestInterpreter new.	stringText := 'The Title' , String lf, String lf , 'The cont{ent}' , String lf, 'More content'.	aText := anInterpreter interpretText: stringText.	self assert: aText title equals: 'The Title'.	self assert: aText contentAsString equals: 'The cont{ent} More content'! !!InterpreterText methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:47'!test5	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: 'The Title', String lf, 'The content'.	self assert: aText title equals: 'The Title'.	self assert: aText contentAsString equals: 'The content'! !!InterpreterText methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:47'!test4	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: String lf, ' The Title ', String lf.	self assert: aText title equals: 'The Title'.! !!InterpreterText methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:47'!test7	| anInterpreter aText stringText |	anInterpreter := CTestInterpreter new.	stringText := 'The Title' , String lf , 'The content' , String lf, 'More content'.	aText := anInterpreter interpretText: stringText.	self assert: aText title equals: 'The Title'.	self assert: aText contentAsString equals: 	'The content More content'! !!InterpreterText methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/15/2016 17:58'!test1	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: ''.	self assert: aText title equals: ''.! !!InterpreterText methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/15/2016 18:00'!test2	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: 'The Title'.	self assert: aText title equals: 'The Title'.! !!InterpreterText methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:47'!test8	| anInterpreter aText stringText |	anInterpreter := CTestInterpreter new.	stringText := 'The Title' , String lf , 'The cont{ent}' , String lf, 'More content'.	aText := anInterpreter interpretText: stringText.	self assert: aText title equals: 'The Title'.	self assert: aText contentAsString equals: 'The cont{ent} More content'! !!InterpreterText methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/15/2016 18:03'!test3	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: '    The Title   '.	self assert: aText title equals: 'The Title'.! !!InterpreterText methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:47'!test6	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: 'The Title', String lf, '   The content  '.	self assert: aText title equals: 'The Title'.	self assert: aText contentAsString equals: 'The content'! !TestCase subclass: #ParserForContentTest	instanceVariableNames: 'aParser'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core-Tests'!!ParserForContentTest methodsFor: 'assertions' stamp: 'FacundoJavierGelatti 10/16/2016 21:27'!assertState: stateName	self assert: aParser state equals: stateName! !!ParserForContentTest methodsFor: 'running' stamp: 'FacundoJavierGelatti 10/16/2016 01:07'!setUp	^ aParser := CTestParser forContent! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:36'!test02ReadLetterWhenWaiting	aParser consumeAllIn: 'a' readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'a')	).	self assertState: 'ReadingWord'! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:30'!test08ParseTextWithWordsToComplete	| text |	text := 'he{llo}'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (WordToComplete withPrefix: 'he' options: #('llo'))	).! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:34'!test12ParseTextWithSpaceInOptions	| text |	text := 'pre text he{  llo  ,  art  } post.'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text')		with: (WordToComplete withPrefix: 'he' options: #('llo' 'art'))		with: (CompletedText with: 'post.')	).! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:36'!test04ReadBlankWhenReading	aParser consumeAllIn: 'a ' readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'a')	).	self assertState: 'WaitingForWord'! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:51'!test03ReadBlankWhenWaiting	aParser consumeAllIn: (' ', String lf) readStream.	self assert: aParser contents equals: OrderedCollection new.	self assertState: 'Waiting'! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:51'!test14ParseTextWithLineBreaks	| text |	text := 'some text.', String lf, 'more text'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'some text. more text')	).! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:34'!test13ParseTextWithManyOptions	| text |	text := 'pre text he{llo, art, r} post.'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text')		with: (WordToComplete withPrefix: 'he' options: #('llo' 'art' 'r'))		with: (CompletedText with: 'post.')	).! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:35'!test01AParserStartsEmtpyAndWaiting	self assert: aParser contents equals: OrderedCollection new.	self assertState: 'Waiting'! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:29'!test07InitWordToComplete	| text |	text := 'he{'.	text do: [ :c | aParser consume: c asString ].	self assertState: 'ReadingSuffixes'.! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:51'!test10ParseTextWithOneOptionWordsToComplete	| text |	text := String lf, '   pre  text  1 ', String tab, ' and   he{llo} post.  ', String lf, ' text  anot{her}    '.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text 1 and')		with: (WordToComplete withPrefix: 'he' options: #('llo'))		with: (CompletedText with: 'post. text')		with: (WordToComplete withPrefix: 'anot' options: #('her'))	).! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:51'!test06ParseTextWithSpaces	| text |	text := String lf, '   asd   qwerty  ', String tab.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'asd qwerty')	).	self assertState: 'WaitingForWord'! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:36'!test05ReadBlankWhenWaitingForWord	aParser consumeAllIn: 'a b' readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'a b')	).	self assertState: 'ReadingWord'! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:31'!test09ParseTextWithWordsToCompleteBetweenText	| text |	text := 'pre text he{llo} post text'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text')		with: (WordToComplete withPrefix: 'he' options: #('llo'))		with: (CompletedText with: 'post text')).! !!ParserForContentTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:34'!test11ParseTextWithMoreThenOneOptionWordToComplete	| text |	text := 'pre text he{llo,art} post.'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text')		with: (WordToComplete withPrefix: 'he' options: #('llo' 'art'))		with: (CompletedText with: 'post.')	).! !TestCase subclass: #ParserForTitleTest	instanceVariableNames: 'aParser'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core-Tests'!!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:02'!test02ReadLetterWhenWaiting	aParser consume: 'a'.	self assert: aParser contents equals: 'a'.	self assert: aParser state equals: 'ReadingWord'! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test04ReadBlankWhenReading	aParser		consume: 'a';		consume: ' '.	self assert: aParser contents equals: 'a'.	self assert: aParser state equals: 'WaitingForWord'! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:51'!test03ReadBlankWhenWaiting	aParser consume: ' '.	aParser consume: String lf.	self assert: aParser contents equals: ''.	self assert: aParser state equals: 'Waiting'! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:52'!test11ParseTitle	| text textStream |	text := '   This    is  a 3 ', String lf, ' more content'.	textStream := text readStream.	aParser consumeAllIn: textStream.	self assert: aParser contents equals: 'This is a 3'.	! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:52'!test08EndInNewLineWhenReading	| text |	text := String lf, '   asd   qwerty', String lf, 'more content'.	text do: [ :c | aParser consume: c asString ].	self assert: aParser contents equals: 'asd qwerty'.	self assert: aParser state equals: 'End'	! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:02'!test01AParserStartsEmtpyAndWaiting	self assert: aParser contents equals: ''.	self assert: aParser state equals: 'Waiting'! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test10ReturnWhenStreamEnds	| text textStream |	text := '123'.	textStream := text readStream.	aParser consumeAllIn: textStream.	self assert: aParser contents equals: '123'.	! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:52'!test09DontKeepReadingIfAtEnd	| text textStream |	text := '123', String lf, 'more content'.	textStream := text readStream.	aParser consumeAllIn: textStream.	self assert: aParser contents equals: '123'.	self assert: aParser state equals: 'End'.	self assert: textStream position equals: 4	! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:51'!test06ParseTextWithSpaces	| text |	text := String lf, '   asd   qwerty  ', String tab.	text do: [ :c | aParser consume: c asString ].	self assert: aParser contents equals: 'asd qwerty'.	self assert: aParser state equals: 'WaitingForWord'	! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/18/2016 12:52'!test07EndInNewLineWhenWaitingForWord	| text |	text := String lf, '   asd   qwerty  ', String tab, String lf, 'more content'.	text do: [ :c | aParser consume: c asString ].	self assert: aParser contents equals: 'asd qwerty'.	self assert: aParser state equals: 'End'	! !!ParserForTitleTest methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test05ReadBlankWhenWaitingForWord	aParser consume: 'a';	        consume: ' ';	        consume: 'b'.	self assert: aParser contents equals: 'a b'.	self assert: aParser state equals: 'ReadingWord'	! !!ParserForTitleTest methodsFor: 'running' stamp: 'FacundoJavierGelatti 10/16/2016 01:02'!setUp	^ aParser := CTestParser forTitle! !TestCase subclass: #ResultTableTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core-Tests'!!ResultTableTest methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/6/2016 22:01'!assertPercentage: percentage isLevel: expectedLevel	| aLevel |	aLevel := CTestResultTable levelForPercentage: percentage.	self assert: aLevel equals: expectedLevel! !!ResultTableTest methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/6/2016 21:33'!test01DetermineLevelFromPercentage	self assertPercentage: 60 isLevel: 'A2 (oder unter)'.	self assertPercentage: 61 isLevel: 'B1'.	self assertPercentage: 87 isLevel: 'B1'.	self assertPercentage: 88 isLevel: 'B2 (oder höher)'! !Object subclass: #TestPrinter	instanceVariableNames: 'printedText'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core-Tests'!!TestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 11:56'!initialize	super initialize.	printedText := ''! !!TestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 11:56'!printedText	^ printedText! !!TestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 11:58'!printText: aString 	printedText := printedText, aString, ' '! !!TestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 11:58'!printTitle: aString 	self printText: '|', aString, '|'! !!TestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 11:58'!printWordToComplete: aString 	self printText: aString, '_'! !