Object subclass: #CTestExam	instanceVariableNames: 'texts'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestExam methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/18/2016 03:18'!initializeWithTexts: aCollectionOfTexts	texts := aCollectionOfTexts! !!CTestExam methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 03:18'!numberOfTexts	^ texts size! !!CTestExam methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 03:44'!evaluate: aSubmission	| responseStream results |	responseStream := aSubmission readStream.	results := texts flatCollect: [ :aText | aText evaluate: responseStream ].	^ CTestResult with: results asArray! !!CTestExam methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/7/2016 11:00'!copyOn: aPrinter	aPrinter printNumberOfTexts: texts size.	texts do: [ :text |		text copyOn: aPrinter	]! !!CTestExam methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 15:08'!evaluate: examCopies on: aResultView 	| answers result |	answers := examCopies flatCollect: [ :each | each answers ].	result := self evaluate: answers.	result for: examCopies toShowIn: aResultView.	^ result! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestExam class	instanceVariableNames: ''!!CTestExam class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/18/2016 03:17'!withTexts: aCollectionOfTexts	^ self new initializeWithTexts: aCollectionOfTexts; yourself! !Object subclass: #CTestInterpreter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestInterpreter methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/18/2016 04:02'!interpretContentFrom: textStream	| theContent contentParser |	contentParser := CTestParser forContent.	theContent := contentParser		consumeAllIn: textStream;		contents.	^ theContent! !!CTestInterpreter methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/18/2016 04:02'!interpretText: aString	| theTitle textStream theContent |	textStream := aString trimBoth readStream.	textStream isEmpty		ifTrue: [ ^ CTestText empty ].	theTitle := self interpretTitleFrom: textStream.	theContent := self interpretContentFrom: textStream.	^ CTestText withTitle: theTitle content: theContent! !!CTestInterpreter methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/18/2016 21:42'!interpretTitleFrom: textStream	| titleParser |	titleParser := CTestParser forTitle.	^ titleParser		consumeAllIn: textStream;		contents! !Object subclass: #CTestParser	instanceVariableNames: 'state content endState'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 16:37'!consume: aCharacter	"self halt: 'consuming ', aCharacter."	state consume: aCharacter! !!CTestParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 12:50'!consumeAllIn: aReadStream 	[state = self endState or: aReadStream atEnd] whileFalse: [ self consume: aReadStream next asString ].	state finish! !!CTestParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 01:47'!addToContents: anObject	self subclassResponsibility! !!CTestParser methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 19:13'!state	^ state name! !!CTestParser methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 23:59'!endState	^ endState! !!CTestParser methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 23:00'!contents	^ content! !!CTestParser methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 20:45'!state: aState	state := aState! !!CTestParser methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 01:41'!initialize	super initialize.	endState := CTestParserState newFor: self named: 'End'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestParser class	instanceVariableNames: ''!!CTestParser class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/16/2016 01:46'!forTitle	^ CTestTitleParser new.! !!CTestParser class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/16/2016 01:46'!forContent	^ CTestContentParser new! !CTestParser subclass: #CTestContentParser	instanceVariableNames: 'currentWord currentSuffix waiting readingWord waitingForWord readingSuffixes words suffixes'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 21:21'!addWordsToContent	^ [		words ifNotEmpty: [ self addToContents: (CompletedText with: (' ' join: words)) ].		words := OrderedCollection new	]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:21'!appendToCurrentSuffix	^ [ :aCharacter | currentSuffix := currentSuffix , aCharacter ]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:27'!addWord	^ [ currentWord isEmpty ifFalse: [			words add: self popCurrentWord		]	]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:51'!addWordToComplete	^ [ self addToContents: self popWordToComplete ]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:50'!addRemainingWords	^ [		self addWord value.		self addWordsToContent value.	]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:21'!appendToCurrentWord	^ [ :aCharacter | currentWord := currentWord , aCharacter ]! !!CTestContentParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 02:27'!addToContents: anObject	content add: anObject! !!CTestContentParser methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 16:23'!initialize	super initialize.		currentWord := ''.	currentSuffix := ''.	words := OrderedCollection new.	suffixes := OrderedCollection new.	content := OrderedCollection new.		self initializeStates.	self bindStates.		state := waiting! !!CTestContentParser methodsFor: 'private-initialization' stamp: 'FacundoJavierGelatti 10/16/2016 16:38'!bindStates	waiting whenLetterState: readingWord.	waiting whenLetterAction: self appendToCurrentWord.		readingWord whenSpaceState: waitingForWord.	readingWord whenSpaceAction: self addWord.	readingWord whenLetterAction: self appendToCurrentWord.	readingWord whenFinishAction: self addRemainingWords.	readingWord when: '{' thenState: readingSuffixes action: self addWordsToContent.		waitingForWord whenLetterState: readingWord.	waitingForWord whenLetterAction: self appendToCurrentWord.	waitingForWord whenFinishAction: self addRemainingWords.		readingSuffixes whenLetterAction: self appendToCurrentSuffix.	readingSuffixes when: '}' thenState: readingWord action: self addWordToComplete.	readingSuffixes when: ',' thenAction: self addSuffix.! !!CTestContentParser methodsFor: 'private-initialization' stamp: 'FacundoJavierGelatti 10/16/2016 02:59'!initializeStates	waiting := CTestParserState newFor: self named: 'Waiting'.	readingWord := CTestParserState newFor: self named: 'ReadingWord'.	waitingForWord := CTestParserState		newFor: self		named: 'WaitingForWord'.	readingSuffixes := CTestParserState		newFor: self		named: 'ReadingSuffixes'! !!CTestContentParser methodsFor: 'private-popping' stamp: 'FacundoJavierGelatti 10/16/2016 16:25'!popWordToComplete	| wordToComplete |	self addSuffix value.	wordToComplete := WordToComplete		withPrefix: self popCurrentWord		options: (Array newFrom: suffixes).	suffixes := OrderedCollection new.	^ wordToComplete! !!CTestContentParser methodsFor: 'private-popping' stamp: 'FacundoJavierGelatti 10/16/2016 16:23'!addSuffix	^ [ suffixes add: self popCurrentSuffix ]! !!CTestContentParser methodsFor: 'private-popping' stamp: 'FacundoJavierGelatti 10/16/2016 16:23'!popCurrentSuffix	| suffix |	suffix := currentSuffix.	currentSuffix := ''.	^ suffix! !!CTestContentParser methodsFor: 'private-popping' stamp: 'FacundoJavierGelatti 10/16/2016 12:27'!popCurrentWord	| word |	word := currentWord.	currentWord := ''.	^ word! !Object subclass: #CTestParserState	instanceVariableNames: 'parser whenSpaceState whenEnterState whenLetterState letterBlock spaceBlock name finishBlock specialChars'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestParserState methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 16:39'!consume: aCharacter	specialChars at: aCharacter ifPresent: [ :p |		p second value.		parser state: p first.		^ nil ].	(self isWhiteSpace: aCharacter)		ifFalse: [ letterBlock value: aCharacter.			parser state: whenLetterState.			^ nil ].	spaceBlock value.	parser state: whenSpaceState.	^ nil! !!CTestParserState methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 12:50'!finish	^ finishBlock value! !!CTestParserState methodsFor: 'printing' stamp: 'FacundoJavierGelatti 10/16/2016 12:03'!printOn: aStream	| title |	title := self name, ' State'.	aStream		nextPutAll: (title first isVowel ifTrue: ['an '] ifFalse: ['a ']);		nextPutAll: title! !!CTestParserState methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 00:56'!name	^ name! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/18/2016 21:51'!when: aCharacter thenState: aState	self when: aCharacter thenState: aState action: []! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/18/2016 21:52'!when: aCharacter thenState: aState action: aBlock	specialChars add: aCharacter -> (Array with: aState with: aBlock)! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 00:48'!whenLetterAction: aBlock	letterBlock := aBlock! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 00:46'!whenLetterState: aState 	whenLetterState := aState! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 12:25'!whenSpaceAction: aBlock	spaceBlock := aBlock! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/18/2016 12:49'!whenEnterState: aState 	self when: String lf thenState: aState.! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 01:54'!whenFinishAction: aBlock	finishBlock := aBlock! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 00:46'!whenSpaceState: aState 	whenSpaceState := aState! !!CTestParserState methodsFor: 'private-testing' stamp: 'FacundoJavierGelatti 10/18/2016 12:42'!isEnter: aCharacter	^ aCharacter = String lf! !!CTestParserState methodsFor: 'private-testing' stamp: 'FacundoJavierGelatti 10/18/2016 12:49'!isWhiteSpace: aCharacter	^ (Array with: String cr with: String lf with: String tab with: String space) includes: aCharacter! !!CTestParserState methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 16:40'!initializeWith: aParser name: aString 	parser := aParser.	name := aString.	specialChars := Dictionary new.		letterBlock := [ :aCharacter | ].	spaceBlock := [ ].		whenLetterState := self.	whenEnterState := self.	whenSpaceState := self.! !!CTestParserState methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/16/2016 16:26'!when: aCharacter thenAction: aBlock	^ self when: aCharacter thenState: self action: aBlock! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestParserState class	instanceVariableNames: ''!!CTestParserState class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/16/2016 00:55'!newFor: aParser named: aString	^ self new		initializeWith: aParser name: aString;		yourself! !Object subclass: #CTestPrinter	instanceVariableNames: 'copies numberOfTexts tray'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 12:08'!initialize	super initialize.	copies := OrderedCollection new! !!CTestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 13:05'!printTitle: aString time: aTimeInSeconds	| newCopy |	newCopy := tray newCopy: copies size + 1 of: numberOfTexts titled: aString withTime: aTimeInSeconds.	copies add: newCopy! !!CTestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 12:09'!printText: aString	self currentCopy addText: aString! !!CTestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 12:09'!currentCopy	^ copies last! !!CTestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 13:03'!tray: aTray 	tray := aTray! !!CTestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 13:09'!print: anExam	anExam copyOn: self.	^ copies! !!CTestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 12:09'!printNumberOfTexts: aNumber	numberOfTexts := aNumber.! !!CTestPrinter methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 12:11'!printWordToComplete: aString	self currentCopy addWordToComplete: aString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestPrinter class	instanceVariableNames: ''!!CTestPrinter class methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 13:02'!newWithTray: aPaperTray 	^ self new		tray: aPaperTray;		yourself! !Object subclass: #CTestResult	instanceVariableNames: 'results sourceSubmission view'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestResult methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/18/2016 03:42'!initializeWith: aCollectionOfResults 	results := aCollectionOfResults! !!CTestResult methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/6/2016 22:29'!maxScore	 ^ results size! !!CTestResult methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 15:11'!giveToStudent	| resultStream |	view renderScore: self score of: self maxScore percentage: self percentage level: self level.			resultStream := results readStream.	sourceSubmission do: [ :each | each consumeResults: resultStream ].	sourceSubmission do: #giveBackToStudent! !!CTestResult methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/6/2016 22:02'!level	^ CTestResultTable levelForPercentage: self percentage! !!CTestResult methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/6/2016 22:28'!score	^ (results select: #value) size! !!CTestResult methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/6/2016 22:29'!percentage	| realPercentage roundedPercentage |	realPercentage := self score * 100 / self maxScore.	roundedPercentage := (realPercentage * 100) rounded / 100.	^ roundedPercentage asFloat! !!CTestResult methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 15:07'!for: sumission toShowIn: aResultView	sourceSubmission := sumission.	view := aResultView.! !!CTestResult methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 03:41'!individualResults	^ results! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestResult class	instanceVariableNames: ''!!CTestResult class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/18/2016 03:41'!with: aCollectionOfResults	^ self new initializeWith: aCollectionOfResults; yourself.! !Object subclass: #CTestResultTable	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestResultTable class	instanceVariableNames: ''!!CTestResultTable class methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/6/2016 22:02'!levelForPercentage: percentage	percentage <= 60 ifTrue: [ ^ 'A2 (oder unter)' ].	percentage >= 88 ifTrue: [ ^ 'B2 (oder höher)' ].	^ 'B1'! !Object subclass: #CTestText	instanceVariableNames: 'title content'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestText methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 03:39'!evaluate: anAnswerStream 	^ content select: [ :each | each requiresAnAnswer ]	     thenCollect: [ :each | each evaluate: anAnswerStream next ]! !!CTestText methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/7/2016 15:10'!copyOn: aPrinter	aPrinter printTitle: title time: self timeInSeconds.	content do: [ :each | each copyOn: aPrinter ]! !!CTestText methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/7/2016 15:11'!timeInSeconds	^ self numberOfWordsToComplete * 15! !!CTestText methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/7/2016 15:11'!numberOfWordsToComplete	^ (content select: #requiresAnAnswer) size! !!CTestText methodsFor: 'conversion' stamp: 'FacundoJavierGelatti 10/16/2016 16:43'!contentAsString	^ '' join: (content collect: [ :c |		c asString	])! !!CTestText methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 18:03'!title	^ title! !!CTestText methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/15/2016 18:22'!initializeTitle: aTitle content: anObject	title := aTitle.	content := anObject ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestText class	instanceVariableNames: ''!!CTestText class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/15/2016 18:22'!withTitle: aString content: theContent	^ self new		initializeTitle: aString content: theContent;		yourself! !!CTestText class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/15/2016 18:20'!empty	^ self withTitle: '' content: nil! !Object subclass: #CTestTextCopy	instanceVariableNames: 'time title view onFinish wordsToComplete'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:03'!time: aTimeInSeconds 	time := aTimeInSeconds.	view time: time! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:21'!addWordToComplete: aString	wordsToComplete := wordsToComplete + 1.	view addWordToComplete: aString! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:00'!initializeWithView: aView	view := aView! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:09'!finish	view hide.	onFinish value! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:21'!initialize	super initialize.	wordsToComplete := 0! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:32'!giveToStudent	view whenContinueDo: [ self finish ].	view render! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:03'!title: aString 	title := aString.	view title: title! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:36'!giveBackToStudent	view show! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:02'!addText: aString	view addText: aString	! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:22'!consumeResults: aStreamOfResults 	view showResults: (aStreamOfResults next: wordsToComplete)! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:16'!answers	^ view answers! !!CTestTextCopy methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:09'!whenFinishDo: aBlock	onFinish := aBlock! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestTextCopy class	instanceVariableNames: ''!!CTestTextCopy class methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 11/8/2016 14:01'!newWithView: aView	^ self new		initializeWithView: aView;		yourself! !CTestParser subclass: #CTestTitleParser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestTitleParser methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 01:46'!initialize	| waiting readingWord waitingForWord |	super initialize.	content := ''.		waiting := CTestParserState newFor: self named: 'Waiting'.	readingWord := CTestParserState newFor: self named: 'ReadingWord'.	waitingForWord := CTestParserState newFor: self named: 'WaitingForWord'.		waiting whenLetterState: readingWord.	waiting whenLetterAction: [ :aCharacter | self addToContents: aCharacter ].		readingWord whenSpaceState: waitingForWord.	readingWord whenEnterState: endState.	readingWord whenLetterAction: [ :aCharacter | self addToContents: aCharacter ].	waitingForWord whenEnterState: endState.	waitingForWord whenLetterState: readingWord.	waitingForWord whenLetterAction: [ :aCharacter | self addToContents: ' ' , aCharacter ].		state := waiting! !!CTestTitleParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 01:47'!addToContents: aCharacter	content := content, aCharacter! !Object subclass: #CompletedText	instanceVariableNames: 'text'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CompletedText methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 21:18'!initializeWithText: aString	text := aString! !!CompletedText methodsFor: 'printing' stamp: 'FacundoJavierGelatti 10/16/2016 21:22'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: '(', text, ')'.! !!CompletedText methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 11:54'!copyOn: aPrinter 	aPrinter printText: text! !!CompletedText methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/16/2016 21:31'!= anotherObject	^ anotherObject text = text.! !!CompletedText methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 03:45'!requiresAnAnswer	^ false! !!CompletedText methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 21:18'!text	^ text! !!CompletedText methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 21:39'!asString	^ self text! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompletedText class	instanceVariableNames: ''!!CompletedText class methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/16/2016 21:19'!with: aText	^ self new initializeWithText: aText! !Object subclass: #ExamDesigner	instanceVariableNames: 'texts interpreter supervisor'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!ExamDesigner methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 12:21'!considerText: aString	| text |	text := interpreter interpretText: aString.	supervisor value: text title.	texts add: text! !!ExamDesigner methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 12:21'!designExam	^ CTestExam withTexts: texts! !!ExamDesigner methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 12:20'!informProgressTo: aSupervisor	supervisor := aSupervisor ! !!ExamDesigner methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 12:23'!initialize	texts := OrderedCollection new.	interpreter := CTestInterpreter new.	supervisor := [ :ignored | ]! !Object subclass: #WordToComplete	instanceVariableNames: 'prefix suffixOptions'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!WordToComplete methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 02:47'!initializeWithPrefix: aString options: aCollection 	prefix := aString.	suffixOptions := aCollection! !!WordToComplete methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 02:45'!prefix	^ prefix! !!WordToComplete methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 02:47'!suffixOptions	^ suffixOptions ! !!WordToComplete methodsFor: 'printing' stamp: 'FacundoJavierGelatti 10/16/2016 21:41'!asString	^ ' ', prefix, '{', (',' join: suffixOptions), '} '! !!WordToComplete methodsFor: 'printing' stamp: 'FacundoJavierGelatti 10/16/2016 21:40'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: '(', self asString, ')'.! !!WordToComplete methodsFor: 'comparing' stamp: 'FacundoJavierGelatti 10/16/2016 12:07'!= anotherObject	^ anotherObject prefix = prefix and: anotherObject suffixOptions = suffixOptions.! !!WordToComplete methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 03:40'!evaluate: aString 	^ suffixOptions includes: aString! !!WordToComplete methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 11:55'!copyOn: aPrinter 	aPrinter printWordToComplete: prefix! !!WordToComplete methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/18/2016 03:40'!requiresAnAnswer	^ true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WordToComplete class	instanceVariableNames: ''!!WordToComplete class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/16/2016 02:39'!withPrefix: aString options: aCollection 	^ self new initializeWithPrefix: aString options: aCollection; yourself! !