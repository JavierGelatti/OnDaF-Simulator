Object subclass: #CTestInterpreter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestInterpreter methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 16:32'!interpretText: aString	| theTitle titleParser textStream contentParser theContent |	textStream := aString trimBoth readStream.	textStream isEmpty		ifTrue: [ ^ CTestText empty ].		titleParser := CTestParser forTitle.	theTitle := titleParser consumeAllIn: textStream; contents.		contentParser := CTestParser forContent.	theContent := contentParser consumeAllIn: textStream; contents.		^ CTestText withTitle: theTitle content: theContent! !Object subclass: #CTestParser	instanceVariableNames: 'state content endState'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 16:37'!consume: aCharacter	"self halt: 'consuming ', aCharacter."	state consume: aCharacter! !!CTestParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 12:50'!consumeAllIn: aReadStream 	[state = self endState or: aReadStream atEnd] whileFalse: [ self consume: aReadStream next asString ].	state finish! !!CTestParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 01:47'!addToContents: anObject	self subclassResponsibility! !!CTestParser methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 19:13'!state	^ state name! !!CTestParser methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 23:59'!endState	^ endState! !!CTestParser methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 23:00'!contents	^ content! !!CTestParser methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 20:45'!state: aState	state := aState! !!CTestParser methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 01:41'!initialize	super initialize.	endState := CTestParserState newFor: self named: 'End'.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestParser class	instanceVariableNames: ''!!CTestParser class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/16/2016 01:46'!forTitle	^ CTestTitleParser new.! !!CTestParser class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/16/2016 01:46'!forContent	^ CTestContentParser new! !CTestParser subclass: #CTestContentParser	instanceVariableNames: 'currentWord currentSuffix waiting readingWord waitingForWord readingSuffixes words suffixes'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 21:21'!addWordsToContent	^ [		words ifNotEmpty: [ self addToContents: (CompletedText with: (' ' join: words)) ].		words := OrderedCollection new	]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:21'!appendToCurrentSuffix	^ [ :aCharacter | currentSuffix := currentSuffix , aCharacter ]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:27'!addWord	^ [ currentWord isEmpty ifFalse: [			words add: self popCurrentWord		]	]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:51'!addWordToComplete	^ [ self addToContents: self popWordToComplete ]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:50'!addRemainingWords	^ [		self addWord value.		self addWordsToContent value.	]! !!CTestContentParser methodsFor: 'private-actions' stamp: 'FacundoJavierGelatti 10/16/2016 12:21'!appendToCurrentWord	^ [ :aCharacter | currentWord := currentWord , aCharacter ]! !!CTestContentParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 02:27'!addToContents: anObject	content add: anObject! !!CTestContentParser methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 16:23'!initialize	super initialize.		currentWord := ''.	currentSuffix := ''.	words := OrderedCollection new.	suffixes := OrderedCollection new.	content := OrderedCollection new.		self initializeStates.	self bindStates.		state := waiting! !!CTestContentParser methodsFor: 'private-initialization' stamp: 'FacundoJavierGelatti 10/16/2016 16:38'!bindStates	waiting whenLetterState: readingWord.	waiting whenLetterAction: self appendToCurrentWord.		readingWord whenSpaceState: waitingForWord.	readingWord whenSpaceAction: self addWord.	readingWord whenLetterAction: self appendToCurrentWord.	readingWord whenFinishAction: self addRemainingWords.	readingWord when: '{' thenState: readingSuffixes action: self addWordsToContent.		waitingForWord whenLetterState: readingWord.	waitingForWord whenLetterAction: self appendToCurrentWord.	waitingForWord whenFinishAction: self addRemainingWords.		readingSuffixes whenLetterAction: self appendToCurrentSuffix.	readingSuffixes when: '}' thenState: readingWord action: self addWordToComplete.	readingSuffixes when: ',' thenAction: self addSuffix.! !!CTestContentParser methodsFor: 'private-initialization' stamp: 'FacundoJavierGelatti 10/16/2016 02:59'!initializeStates	waiting := CTestParserState newFor: self named: 'Waiting'.	readingWord := CTestParserState newFor: self named: 'ReadingWord'.	waitingForWord := CTestParserState		newFor: self		named: 'WaitingForWord'.	readingSuffixes := CTestParserState		newFor: self		named: 'ReadingSuffixes'! !!CTestContentParser methodsFor: 'private-popping' stamp: 'FacundoJavierGelatti 10/16/2016 16:25'!popWordToComplete	| wordToComplete |	self addSuffix value.	wordToComplete := WordToComplete		withPrefix: self popCurrentWord		options: (Array newFrom: suffixes).	suffixes := OrderedCollection new.	^ wordToComplete! !!CTestContentParser methodsFor: 'private-popping' stamp: 'FacundoJavierGelatti 10/16/2016 16:23'!addSuffix	^ [ suffixes add: self popCurrentSuffix ]! !!CTestContentParser methodsFor: 'private-popping' stamp: 'FacundoJavierGelatti 10/16/2016 16:23'!popCurrentSuffix	| suffix |	suffix := currentSuffix.	currentSuffix := ''.	^ suffix! !!CTestContentParser methodsFor: 'private-popping' stamp: 'FacundoJavierGelatti 10/16/2016 12:27'!popCurrentWord	| word |	word := currentWord.	currentWord := ''.	^ word! !Object subclass: #CTestParserState	instanceVariableNames: 'parser whenSpaceState whenEnterState whenLetterState letterBlock spaceBlock name finishBlock specialChars'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestParserState methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 16:39'!consume: aCharacter	specialChars at: aCharacter ifPresent: [ :p |		p second value.		parser state: p first.		^ nil ].	(self isWhiteSpace: aCharacter)		ifFalse: [ letterBlock value: aCharacter.			parser state: whenLetterState.			^ nil ].	spaceBlock value.	parser state: whenSpaceState.	^ nil! !!CTestParserState methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 12:50'!finish	^ finishBlock value! !!CTestParserState methodsFor: 'printing' stamp: 'FacundoJavierGelatti 10/16/2016 12:03'!printOn: aStream	| title |	title := self name, ' State'.	aStream		nextPutAll: (title first isVowel ifTrue: ['an '] ifFalse: ['a ']);		nextPutAll: title! !!CTestParserState methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 00:56'!name	^ name! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 02:23'!when: aCharacter thenState: aState action: aBlock	specialChars add: aCharacter -> (Array with: aState with: aBlock)! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 00:46'!whenSpaceState: aState 	whenSpaceState := aState! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 00:48'!whenLetterAction: aBlock	letterBlock := aBlock! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 00:46'!whenLetterState: aState 	whenLetterState := aState! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 12:25'!whenSpaceAction: aBlock	spaceBlock := aBlock! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 16:39'!whenEnterState: aState 	self when: String cr thenState: aState.! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 01:54'!whenFinishAction: aBlock	finishBlock := aBlock! !!CTestParserState methodsFor: 'configuration' stamp: 'FacundoJavierGelatti 10/16/2016 02:24'!when: aCharacter thenState: aState	specialChars add: aCharacter -> (Array with: aState with: [  ])! !!CTestParserState methodsFor: 'private-testing' stamp: 'FacundoJavierGelatti 10/16/2016 00:42'!isEnter: aCharacter	^ aCharacter = String cr! !!CTestParserState methodsFor: 'private-testing' stamp: 'FacundoJavierGelatti 10/15/2016 19:59'!isWhiteSpace: aCharacter	^ (Array with: String cr with: String tab with: String space) includes: aCharacter! !!CTestParserState methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 16:40'!initializeWith: aParser name: aString 	parser := aParser.	name := aString.	specialChars := Dictionary new.		letterBlock := [ :aCharacter | ].	spaceBlock := [ ].		whenLetterState := self.	whenEnterState := self.	whenSpaceState := self.! !!CTestParserState methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/16/2016 16:26'!when: aCharacter thenAction: aBlock	^ self when: aCharacter thenState: self action: aBlock! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestParserState class	instanceVariableNames: ''!!CTestParserState class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/16/2016 00:55'!newFor: aParser named: aString	^ self new		initializeWith: aParser name: aString;		yourself! !Object subclass: #CTestText	instanceVariableNames: 'title content'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestText methodsFor: 'conversion' stamp: 'FacundoJavierGelatti 10/16/2016 16:43'!contentAsString	^ '' join: (content collect: [ :c |		c asString	])! !!CTestText methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/15/2016 18:03'!title	^ title! !!CTestText methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/15/2016 18:22'!initializeTitle: aTitle content: anObject	title := aTitle.	content := anObject ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CTestText class	instanceVariableNames: ''!!CTestText class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/15/2016 18:22'!withTitle: aString content: theContent	^ self new		initializeTitle: aString content: theContent;		yourself! !!CTestText class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/15/2016 18:20'!empty	^ self withTitle: '' content: nil! !CTestParser subclass: #CTestTitleParser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CTestTitleParser methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 01:46'!initialize	| waiting readingWord waitingForWord |	super initialize.	content := ''.		waiting := CTestParserState newFor: self named: 'Waiting'.	readingWord := CTestParserState newFor: self named: 'ReadingWord'.	waitingForWord := CTestParserState newFor: self named: 'WaitingForWord'.		waiting whenLetterState: readingWord.	waiting whenLetterAction: [ :aCharacter | self addToContents: aCharacter ].		readingWord whenSpaceState: waitingForWord.	readingWord whenEnterState: endState.	readingWord whenLetterAction: [ :aCharacter | self addToContents: aCharacter ].	waitingForWord whenEnterState: endState.	waitingForWord whenLetterState: readingWord.	waitingForWord whenLetterAction: [ :aCharacter | self addToContents: ' ' , aCharacter ].		state := waiting! !!CTestTitleParser methodsFor: 'operations' stamp: 'FacundoJavierGelatti 10/16/2016 01:47'!addToContents: aCharacter	content := content, aCharacter! !Object subclass: #CompletedText	instanceVariableNames: 'text'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!CompletedText methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 21:18'!initializeWithText: aString	text := aString! !!CompletedText methodsFor: 'printing' stamp: 'FacundoJavierGelatti 10/16/2016 21:22'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: '(', text, ')'.! !!CompletedText methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/16/2016 21:31'!= anotherObject	^ anotherObject text = text.! !!CompletedText methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 21:18'!text	^ text! !!CompletedText methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 21:39'!asString	^ self text! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompletedText class	instanceVariableNames: ''!!CompletedText class methodsFor: 'as yet unclassified' stamp: 'FacundoJavierGelatti 10/16/2016 21:19'!with: aText	^ self new initializeWithText: aText! !TestCase subclass: #TestInterpreter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!TestInterpreter methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/15/2016 18:52'!test5	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: 'The Title', String cr, 'The content'.	self assert: aText title equals: 'The Title'.	self assert: aText contentAsString equals: 'The content'! !!TestInterpreter methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/15/2016 18:07'!test4	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: String cr, ' The Title ', String cr.	self assert: aText title equals: 'The Title'.! !!TestInterpreter methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 16:40'!test7	| anInterpreter aText stringText |	anInterpreter := CTestInterpreter new.	stringText := 'The Title' , String cr , 'The content' , String cr, 'More content'.	aText := anInterpreter interpretText: stringText.	self assert: aText title equals: 'The Title'.	self assert: aText contentAsString equals: 	'The content More content'! !!TestInterpreter methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/15/2016 17:58'!test1	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: ''.	self assert: aText title equals: ''.! !!TestInterpreter methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/15/2016 18:00'!test2	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: 'The Title'.	self assert: aText title equals: 'The Title'.! !!TestInterpreter methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:41'!test8	| anInterpreter aText stringText |	anInterpreter := CTestInterpreter new.	stringText := 'The Title' , String cr , 'The cont{ent}' , String cr, 'More content'.	aText := anInterpreter interpretText: stringText.	self assert: aText title equals: 'The Title'.	self assert: aText contentAsString equals: 'The cont{ent} More content'! !!TestInterpreter methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/15/2016 18:03'!test3	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: '    The Title   '.	self assert: aText title equals: 'The Title'.! !!TestInterpreter methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/15/2016 18:52'!test6	| anInterpreter aText |	anInterpreter := CTestInterpreter new.	aText := anInterpreter interpretText: 'The Title', String cr, '   The content  '.	self assert: aText title equals: 'The Title'.	self assert: aText contentAsString equals: 'The content'! !TestCase subclass: #TestParserForContent	instanceVariableNames: 'aParser'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!TestParserForContent methodsFor: 'assertions' stamp: 'FacundoJavierGelatti 10/16/2016 21:27'!assertState: stateName	self assert: aParser state equals: stateName! !!TestParserForContent methodsFor: 'running' stamp: 'FacundoJavierGelatti 10/16/2016 01:07'!setUp	^ aParser := CTestParser forContent! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:36'!test02ReadLetterWhenWaiting	aParser consumeAllIn: 'a' readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'a')	).	self assertState: 'ReadingWord'! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:30'!test08ParseTextWithWordsToComplete	| text |	text := 'he{llo}'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (WordToComplete withPrefix: 'he' options: #('llo'))	).! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:34'!test12ParseTextWithSpaceInOptions	| text |	text := 'pre text he{  llo  ,  art  } post.'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text')		with: (WordToComplete withPrefix: 'he' options: #('llo' 'art'))		with: (CompletedText with: 'post.')	).! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:34'!test14ParseTextWithLineBreaks	| text |	text := 'some text.', String cr, 'more text'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'some text. more text')	).! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:36'!test03ReadBlankWhenWaiting	aParser consumeAllIn: (' ', String cr) readStream.	self assert: aParser contents equals: OrderedCollection new.	self assertState: 'Waiting'! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:36'!test04ReadBlankWhenReading	aParser consumeAllIn: 'a ' readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'a')	).	self assertState: 'WaitingForWord'! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:34'!test13ParseTextWithManyOptions	| text |	text := 'pre text he{llo, art, r} post.'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text')		with: (WordToComplete withPrefix: 'he' options: #('llo' 'art' 'r'))		with: (CompletedText with: 'post.')	).! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:35'!test01AParserStartsEmtpyAndWaiting	self assert: aParser contents equals: OrderedCollection new.	self assertState: 'Waiting'! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:29'!test07InitWordToComplete	| text |	text := 'he{'.	text do: [ :c | aParser consume: c asString ].	self assertState: 'ReadingSuffixes'.! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:33'!test10ParseTextWithOneOptionWordsToComplete	| text |	text := String cr, '   pre  text  1 ', String tab, ' and   he{llo} post.  ', String cr, ' text  anot{her}    '.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text 1 and')		with: (WordToComplete withPrefix: 'he' options: #('llo'))		with: (CompletedText with: 'post. text')		with: (WordToComplete withPrefix: 'anot' options: #('her'))	).! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:37'!test06ParseTextWithSpaces	| text |	text := String cr, '   asd   qwerty  ', String tab.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'asd qwerty')	).	self assertState: 'WaitingForWord'! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:36'!test05ReadBlankWhenWaitingForWord	aParser consumeAllIn: 'a b' readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'a b')	).	self assertState: 'ReadingWord'! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:31'!test09ParseTextWithWordsToCompleteBetweenText	| text |	text := 'pre text he{llo} post text'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text')		with: (WordToComplete withPrefix: 'he' options: #('llo'))		with: (CompletedText with: 'post text')).! !!TestParserForContent methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 21:34'!test11ParseTextWithMoreThenOneOptionWordToComplete	| text |	text := 'pre text he{llo,art} post.'.	aParser consumeAllIn: text readStream.	self assert: aParser contents equals: (OrderedCollection		with: (CompletedText with: 'pre text')		with: (WordToComplete withPrefix: 'he' options: #('llo' 'art'))		with: (CompletedText with: 'post.')	).! !TestCase subclass: #TestParserForTitle	instanceVariableNames: 'aParser'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:02'!test02ReadLetterWhenWaiting	aParser consume: 'a'.	self assert: aParser contents equals: 'a'.	self assert: aParser state equals: 'ReadingWord'! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test04ReadBlankWhenReading	aParser		consume: 'a';		consume: ' '.	self assert: aParser contents equals: 'a'.	self assert: aParser state equals: 'WaitingForWord'! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test03ReadBlankWhenWaiting	aParser consume: ' '.	aParser consume: String cr.	self assert: aParser contents equals: ''.	self assert: aParser state equals: 'Waiting'! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:58'!test11ParseTitle	| text textStream |	text := '   This    is  a 3 ', String cr, ' more content'.	textStream := text readStream.	aParser consumeAllIn: textStream.	self assert: aParser contents equals: 'This is a 3'.	! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test08EndInNewLineWhenReading	| text |	text := String cr, '   asd   qwerty', String cr, 'more content'.	text do: [ :c | aParser consume: c asString ].	self assert: aParser contents equals: 'asd qwerty'.	self assert: aParser state equals: 'End'	! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:02'!test01AParserStartsEmtpyAndWaiting	self assert: aParser contents equals: ''.	self assert: aParser state equals: 'Waiting'! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test10ReturnWhenStreamEnds	| text textStream |	text := '123'.	textStream := text readStream.	aParser consumeAllIn: textStream.	self assert: aParser contents equals: '123'.	! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test09DontKeepReadingIfAtEnd	| text textStream |	text := '123', String cr, 'more content'.	textStream := text readStream.	aParser consumeAllIn: textStream.	self assert: aParser contents equals: '123'.	self assert: aParser state equals: 'End'.	self assert: textStream position equals: 4	! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test07EndInNewLineWhenWaitingForWord	| text |	text := String cr, '   asd   qwerty  ', String tab, String cr, 'more content'.	text do: [ :c | aParser consume: c asString ].	self assert: aParser contents equals: 'asd qwerty'.	self assert: aParser state equals: 'End'	! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test06ParseTextWithSpaces	| text |	text := String cr, '   asd   qwerty  ', String tab.	text do: [ :c | aParser consume: c asString ].	self assert: aParser contents equals: 'asd qwerty'.	self assert: aParser state equals: 'WaitingForWord'	! !!TestParserForTitle methodsFor: 'tests' stamp: 'FacundoJavierGelatti 10/16/2016 01:03'!test05ReadBlankWhenWaitingForWord	aParser consume: 'a';	        consume: ' ';	        consume: 'b'.	self assert: aParser contents equals: 'a b'.	self assert: aParser state equals: 'ReadingWord'	! !!TestParserForTitle methodsFor: 'running' stamp: 'FacundoJavierGelatti 10/16/2016 01:02'!setUp	^ aParser := CTestParser forTitle! !Object subclass: #WordToComplete	instanceVariableNames: 'prefix suffixOptions'	classVariableNames: ''	poolDictionaries: ''	category: 'OndafSimulator-Core'!!WordToComplete methodsFor: 'initialization' stamp: 'FacundoJavierGelatti 10/16/2016 02:47'!initializeWithPrefix: aString options: aCollection 	prefix := aString.	suffixOptions := aCollection! !!WordToComplete methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 02:45'!prefix	^ prefix! !!WordToComplete methodsFor: 'accessing' stamp: 'FacundoJavierGelatti 10/16/2016 02:47'!suffixOptions	^ suffixOptions ! !!WordToComplete methodsFor: 'printing' stamp: 'FacundoJavierGelatti 10/16/2016 21:41'!asString	^ ' ', prefix, '{', (',' join: suffixOptions), '} '! !!WordToComplete methodsFor: 'printing' stamp: 'FacundoJavierGelatti 10/16/2016 21:40'!printOn: aStream	super printOn: aStream.	aStream nextPutAll: '(', self asString, ')'.! !!WordToComplete methodsFor: 'comparing' stamp: 'FacundoJavierGelatti 10/16/2016 12:07'!= anotherObject	^ anotherObject prefix = prefix and: anotherObject suffixOptions = suffixOptions.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WordToComplete class	instanceVariableNames: ''!!WordToComplete class methodsFor: 'instance creation' stamp: 'FacundoJavierGelatti 10/16/2016 02:39'!withPrefix: aString options: aCollection 	^ self new initializeWithPrefix: aString options: aCollection; yourself! !